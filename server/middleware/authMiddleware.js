import jwt from 'jsonwebtoken'

// –ó–∞—â–∏—Ç–∞ –≤—Å–µ—Ö –ù–ï-GET –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî —Ä–æ–ª—å 'user' –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
export const protectNonGetRequests = (req, res, next) => {
    if (req.method === 'GET') {
        return next()
    }

    const authHeader = req.headers.authorization

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' })
    }

    const token = authHeader.split(' ')[1]

    try {
        const decoded = jwt.verify(token, process.env.TOKEN_SECRET_KEY)

        if (decoded.role === 'user') {
            return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
        }

        req.user = decoded
        next()
    } catch (err) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' })
    }
}

// üîê –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ 'user'
export const protectStrict = (req, res, next) => {
    const authHeader = req.headers.authorization

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' })
    }

    const token = authHeader.split(' ')[1]

    try {
        const decoded = jwt.verify(token, process.env.TOKEN_SECRET_KEY)

        if (decoded.role === 'user') {
            return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
        }

        req.user = decoded
        next()
    } catch (err) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' })
    }
}
